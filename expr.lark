TRUE: "true"
FALSE: "false"
ID: /(?!(true|false)\b)[a-zA-Z_][a-zA-Z0-9_]*/

// ----- For DSL ----- //
NOTE_PITCH: "C" | "C#" | "D" | "D#" | "E" | "F" | "F#" | "G" | "G#" | "A" | "A#" | "B" | "R"


%import common.INT -> INT
%import common.WS
%ignore WS


?expr1: "if" expr1 "then" expr1 "else" expr1 -> if_expr
      | expr2

?expr2: expr2 "||" expr4 -> or_expr
      | expr3

?expr3: expr3 "&&" expr4 -> and_expr
      | expr4

?expr4: "!" expr4 -> not_expr
      | expr5

?expr5: expr5 "==" expr6 -> eq
      | expr5 "!=" expr6 -> neq
      | expr5 "<" expr6 -> lt
      | expr5 "<=" expr6 -> lore
      | expr5 ">" expr6 -> gt
      | expr5 ">=" expr6 -> gore
      | expr6  

?expr6: expr6 "+" term  -> plus
      | expr6 "-" term -> minus
      | term

?term: term "*" factor -> times
     | term "/" factor -> divide
     | factor

?factor: "-" factor  -> neg
       | atom

?atom: TRUE -> true
     | FALSE -> false
     | ID  -> id
     | INT -> int
     | ID "(" arg_list ")" -> app
     | "(" expr1 ")"
     | "let" ID "=" expr1 "in" expr1 "end" -> let
     | "letfun" ID "(" param_list ")" "=" expr1 "in" expr1 "end" -> letfun
     | note
     | tune
     | concat_tunes
     | transpose

note: "note" NOTE_PITCH "for" expr1 "seconds" -> note
tune: "tune" "{" note_list "}" -> tune
concat_tunes: tune "++" tune -> concat_tunes
transpose: "transpose" tune "by" expr1 -> transpose

param_list: [ID ("," ID)*]
arg_list: [expr1 ("," expr1)*]
note_list: [note ("," note)*]


