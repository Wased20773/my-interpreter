TRUE: "true"
FALSE: "false"
ID: /(?!(true|false|read)\b)[a-zA-Z_][a-zA-Z0-9_]*/

// ----- For DSL ----- //
NOTE_PITCH: "C" | "C#" | "D" | "D#" | "E" | "F" | "F#" | "G" | "G#" | "A" | "A#" | "B" | "R"
//

%import common.INT -> INT
%import common.WS
%ignore WS


?expr0: expr1 ";" expr0 -> seq
      | expr1

?expr1: ID ":=" expr1 -> assign
      | "show" expr1 -> show
      | "if" expr0 "then" expr0 "else" expr0 -> if_expr
      | expr2

?expr2: expr2 "||" expr3 -> or_expr
      | expr3

?expr3: expr3 "&&" expr4 -> and_expr
      | expr4

?expr4: "!" expr4 -> not_expr
      | expr5

?expr5: expr6
      | expr6 "==" expr6 -> eq
      | expr6 "!=" expr6 -> neq
      | expr6 "<" expr6  -> lt
      | expr6 "<=" expr6 -> lore
      | expr6 ">" expr6  -> gt
      | expr6 ">=" expr6 -> gore


?expr6: expr6 "+" term  -> plus
      | expr6 "-" term -> minus
      | term

?term: term "*" factor -> times
     | term "/" factor -> divide
     | factor

?factor: "-" factor  -> neg
       | application

?application: atom
            | application "(" expr0 ")"  -> app

?atom: TRUE -> true
     | FALSE -> false
     | ID  -> id
     | INT -> int
     | "(" expr0 ")"
     | "let" ID "=" expr0 "in" expr0 "end" -> let
     | "letfun" ID "(" expr0 ")" "=" expr0 "in" expr0 "end" -> letfun
     | "read" -> read
     | note
     | tune
     | concat_tunes
     | transpose
     | repeat
     | volume

// ----- For DSL ----- //
note: "note" NOTE_PITCH "for" expr0 "seconds" -> note
tune: "tune" "{" note_list "}" -> tune
concat_tunes: tune "++" tune -> concat_tunes
transpose: "transpose" tune "by" expr0 -> transpose
repeat: "repeat" "(" tunes "," expr0 ")" -> repeat 
volume: "volume" "(" tunes "," expr0 ")" -> volume

note_list: [tunes ("," tunes)*]
      
?tunes: note
      | tune
      | repeat
      | volume
//